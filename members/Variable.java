package oop.ex6.members;

/**
 * This class represents a variable in an s-java file.
 */
public class Variable {

    /*----=   Constants  =----*/

    // Formats for variable exceptions that are generated by this class.
    private final static String UNINITIALIZED_FINAL =
            "final variable must be initialized during construction.";
    private final static String ILLEGAL_ASSIGNMENT_1 =
            "variables of type ";
    private final static String ILLEGAL_ASSIGNMENT_2 =
            " cannot be assigned values of type ";
    private final static String FINAL_ASSIGNMENT =
            "cannot assign a value to final variable";

    // Constants matching the toString() output of each variable type.
    private final static String TYPE_INT = "INT";
    private final static String TYPE_STRING = "STRING";
    private final static String TYPE_BOOLEAN = "BOOLEAN";
    private final static String TYPE_CHAR = "CHAR";
    private final static String TYPE_DOUBLE = "DOUBLE";

    // Constants that list for each variable type which variable types may be assigned to it.
    private final static String[] intAssignableTypes = {TYPE_INT};
    private final static String[] stringAssignableTypes = {TYPE_STRING};
    private final static String[] booleanAssignableTypes = {TYPE_BOOLEAN, TYPE_INT, TYPE_DOUBLE};
    private final static String[] charAssignableTypes = {TYPE_CHAR};
    private final static String[] doubleAssignableTypes = {TYPE_DOUBLE, TYPE_INT};

    /*----=   enum Type  =----*/

    /**
     * This class represent a legal s-java type.
     */
    public enum Type {
        INT(intAssignableTypes),
        STRING(stringAssignableTypes),
        BOOLEAN(booleanAssignableTypes),
        CHAR(charAssignableTypes),
        DOUBLE(doubleAssignableTypes);

        private final String[] assignableTypes;

        /**
         * Constructor for a variable type.
         * @param assignableTypes - the list of variable types which may be assigned to this variable type.
         */
        Type(String[] assignableTypes){
            this.assignableTypes = assignableTypes;
        }

        /**
         * @param type - a variable type
         * @return true if the given variable type may be assigned to this variable type; false otherwise.
         */
        public boolean accepts(Variable.Type type){
            for (String assignableType: this.assignableTypes){
                if (assignableType.equals(type.toString())){
                    return true;
                }
            }
            return false;
        }
    }

    /*----=   Instance Data Members  =----*/

    private final boolean isFinal;
    private final Variable.Type variableType;
    private Variable.Type valueType;

    /*----=   Constructor  =----*/

    /**
     * A constructor for a variable.
     * @param isFinal - this variable's final modifier.
     * @param variableType - this variable's type.
     * @param valueType - this variable's input value.
     * @throws VariableException - if this variable is an uninitialized final variable; or
     * if this variable's input value cannot be assigned to the variable's type.
     */
    public Variable(boolean isFinal, Variable.Type variableType, Variable.Type valueType)
            throws VariableException{
        this.isFinal = isFinal;
        this.variableType = variableType;
        if (valueType == null) {
            this.assignNullValue();
        }
        else {
            this.assignNewValue(valueType);
        }
    }

    /*----=   Instance Methods  =----*/

    /**
     * Constructor helper method which constructs an uninitialized variable.
     * @throws VariableException - if this variable is final.
     */
    private void assignNullValue() throws VariableException {
        if (this.isFinal){
            throw new VariableException(UNINITIALIZED_FINAL);
        }
        this.valueType = null;
    }

    /**
     * Assigns the given input value to this variable.
     * @param valueType - the given input value.
     * @throws VariableException - the variable's input value cannot be assigned to the variable's type.
     */
    private void assignNewValue(Variable.Type valueType) throws VariableException { //variableTypes != null
        if (this.variableType.accepts(valueType)) {
            this.valueType = valueType;
        } else {
            throw new VariableException
                    (ILLEGAL_ASSIGNMENT_1+this.variableType.toString()+ILLEGAL_ASSIGNMENT_2+
                            valueType.toString()+".");
        }
    }

    /**
     * Assigns a new input value to this variable. This method assumes the new input is not null.
     * @param valueType - the given input value.
     * @throws VariableException - if this variable final and cannot be modified; or
     * if this variable's input value cannot be assigned to the variable's type.
     */
    public void assignVariable(Variable.Type valueType) throws VariableException { //variableTypes != null
        if (this.isFinal){
            throw new VariableException(FINAL_ASSIGNMENT);
        }
        this.assignNewValue(valueType);
    }

    /**
     * @return the s-java type corresponding to this variable's input value.
     */
    public Variable.Type getValueType(){
        return this.valueType;
    }

    /**
     * @return a deep copy of this variable.
     * @throws VariableException - if construction of the deep copy fails; this exception should not be
     * reachable.
     */
    public Variable copy() throws VariableException {
        return new Variable(this.isFinal, this.variableType, this.valueType);
    }
}

package oop.ex6.scopes;

import oop.ex6.executer.ExecutorException;
import oop.ex6.members.Parameter;
import oop.ex6.members.Value;
import oop.ex6.members.Variable;

import java.util.ArrayList;
import java.util.Hashtable;

/**
 * This abstract class represents a scope inside an s-java file.
 */
public abstract class Scope {

    /*----=   Instance Data Members  =----*/

    // Formats for scope exceptions that are generated by this class.
    protected final static String VARIABLE_OVERFLOW =
            "variable name overflow.";
    protected final static String LOCAL_METHOD_DECLARATION =
            "a method may not be declared inside another method";
    protected final static String ILLEGAL_CONDITION =
            "illegal condition. ";
    protected final static String UNINITIALIZED_VALUE =
            " is uninitialized.";
    protected final static String NOT_BOOLEAN_CONDITION =
            "condition should be a boolean value.";
    protected final static String ILLEGAL_METHOD_CALL =
            " illegal method call: ";
    protected final static String PARAMETERS_NUMBER_EXPECTED =
            " parameters expected.";
    protected final static String BAD_PARAMETER_1 =
            " Expected: parameter of type ";
    protected final static String BAD_PARAMETER_2 =
            ". Found: parameter of type ";
    protected final static String UNCLOSED_IF_WHILE =
            " failed to close an if/while scope.";
    protected final static String UNCLOSED_METHOD =
            " failed to close a method scope.";
    protected final static String MISSING_RETURN_STATEMENT =
            " missing return statement.";
    protected final static String VARIABLE =
            " variable ";
    protected final static String MISSING =
            " does not exist in this scope.";
    protected final static String METHOD_OVERFLOW =
            " method overflow. Two or more methods are named ";
    protected final static String PARAMETER_OVERFLOW =
            " parameter overflow. Two or parameters have the same name.";
    protected final static String GLOBAL_IF_WHILE =
            " an if/while block may only be opened inside a method.";
    protected final static String GLOBAL_METHOD_CALL =
            " method calls may only appear inside a method.";
    protected final static String GLOBAL_RETURN_STATEMENT =
            " return statements may only appear inside a method.";
    protected final static String GLOBAL_CLOSE_STATEMENTS =
            " close-block statements may only appear inside a method";

    /*----=   Instance Data Members  =----*/

    protected Hashtable<String, Variable> variables;
    protected Scope parent;

    /*----=   Instance Methods  =----*/

    /**
     * Gets the closest accessible variable of the given name.
     * @param variableName - the given variable name.
     * @return - the retrieved variable.
     * @throws ExecutorException - if no variable with the given name exists in this scope's accessible
     * variables.
     */
    protected abstract Variable getVariable(String variableName) throws ExecutorException;

    /**
     * Gets the variable type of a given value.
     * @param value - the given value.
     * @return - the variable type.
     * @throws ExecutorException - if the variable type is null i.e. the value referenced an uninitialized
     * variable; or if the value referenced a variable which does not exist in this scope's accessible
     * variables.
     */
    protected abstract Variable.Type getValueType(Value value) throws ExecutorException;

    /**
     * Define a new variable with the given parameters in this scope.
     * @param isFinal - the variable's final modifier.
     * @param variableType - the variable's type.
     * @param variableName - the variable's name.
     * @param value - the variable's value.
     * @throws ExecutorException - if a variable of the same name already exists in this scope; or if
     * the variable's value references a missing or uninitialized variable; or if the variable construction
     * was illegal.
     */
    public abstract void defineVariable
            (boolean isFinal, Variable.Type variableType, String variableName, Value value)
            throws ExecutorException;

    /**
     * Assign a new value to an existing variable in this scope's accessible variables.
     * @param variableName - the variable's name.
     * @param value - the value.
     * @throws ExecutorException - if the variable doesn't exist in this scope's accessible variables;
     * or if the value references a missing or uninitialized variable;
     * or if the variable assignment was illegal.
     */
    public abstract void assignValue(String variableName, Value value) throws ExecutorException;

    /**
     * Assign a new value to existing variable in the scope's accessible variables.
     * @param variableName - the variable's name.
     * @param valueType - the value's variable type.
     * @throws ExecutorException - if the variable doesn't exist in this scope's accessible variables;
     * or if variable assignment was illegal.
     */
    protected abstract void assignType(String variableName, Variable.Type valueType) throws ExecutorException;

    /**
     * Declare a new method with the given parameters.
     * @param methodName - the method's name.
     * @param parameters - the given parameters.
     * @throws ExecutorException - if a method of the same name already exists; if two parameters have the
     * same name; if the method was declared from inside a method.
     */
    public abstract void declareMethod(String methodName, ArrayList<Parameter> parameters) throws ExecutorException;

    /**
     * Open a new method scope inside this scope.
     * @param methodName - the method's name.
     * @return - the new method scope.
     * @throws ExecutorException - if the method was opened from inside a method.
     */
    public abstract MethodScope openMethodScope(String methodName) throws ExecutorException;

    /**
     * Open a new if/while scope inside this scope.
     * @param conditions - the if/while statement's conditions.
     * @return - the new if/while scope.
     * @throws ExecutorException - if the method was opened in the global scope; or if the conditions were
     * illegal i.e. not boolean or referencing a missing/uninitialized variable.
     */
    public abstract IfWhileScope openIfWhileScope(ArrayList<Value> conditions) throws ExecutorException;

    /**
     * Perform a method call  to the given method, with the given values.
     * @param methodName - the method's name.
     * @param values - the given values.
     * @throws ExecutorException - if the method does not exist in this file's global scope; or if one
     * of the values references a missing or uninitialized variable; or if the method's parameters don't
     * match the given values.
     */
    public abstract void callMethod(String methodName, ArrayList<Value> values) throws ExecutorException;

    /**
     * Get the parameters of the given method.
     * @param methodName - the method's name.
     * @return - the method's parameters.
     * @throws ExecutorException - if the method does not exist in this file's global scope.
     */
    protected abstract ArrayList<Parameter> getMethodParameters(String methodName) throws ExecutorException;

    /**
     * Send a return statement to this scope.
     * @throws ExecutorException - if this return statement was sent to a global scope.
     */
    public abstract void sendReturnStatement() throws ExecutorException;

    /**
     * Disconnect this scope from its parent.
     * @return - this scope's parent.
     * @throws ExecutorException - if this statement was sent to a method scope without a return statement
     * immediately preceding it; if this statement was sent to a global scope.
     */
    public abstract Scope closeScope() throws ExecutorException;

    /**
     * Verify that the scope receiving this statement is global.
     * @throws ExecutorException - if this statement was sent to a local scope.
     */
    public abstract void endCode() throws ExecutorException;
}
